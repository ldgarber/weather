{"version":3,"sources":["components/Home.js","components/FiveDay.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","React","Component","FiveDay","props","WeatherCard","icon_url","this","icon","className","src","alt","city","country","location_description","description","temp","API_KEY","process","App","state","location","undefined","temperature","humidity","error","onSuggestSelect","suggest","_this","setState","getWeatherFromCoords","lat","lng","setForecastFromAPIResponse","response","getWeather","_callee","api_call","regenerator_default","wrap","_context","prev","next","fetch","concat","sent","json","console","log","setWeatherStateFromAPIResponse","stop","main","name","sys","weather","wind","speed","_callee2","lon","_context2","getFiveDayForecastFromCoords","_callee3","_context3","coords","_ref4","latitude","longitude","_this2","react_router_dom","onClick","to","Geosuggest_esm","components_WeatherCard","react_router","exact","path","component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41b27d50.chunk.js","sourcesContent":["import React from \"react\"; \n\nclass Home extends React.Component {\n  render() {\n    return(\n      <p>Home</p>\n    )\n  }\n} \n\nexport default Home; \n","import React from \"react\"; \n\nconst FiveDay = (props) => {\n\n  return(\n    <p>Five Day Forecast</p>\n  )\n} \n\nexport default FiveDay; \n","import React from \"react\"; \n//var Sunny = require('../assets/sunny.svg'); \n\nclass WeatherCard extends React.Component {  \n  render() {\n    let icon_url = \"http://openweathermap.org/img/w/\" + this.props.icon + \".png\"; \n    return(\n      <div className=\"weather-card\">\n        <img className=\"weather-icon\" src={icon_url} alt=\"weather\"/>\n        <h3>{this.props.city}, {this.props.country}</h3>\n        { this.props.location_description && <p>{this.props.location_description}</p> } \n        <p>{this.props.description}</p>\n        <p>{this.props.temp}ËšF</p>\n      </div>\n    ); \n  } \n} \n\nexport default WeatherCard; \n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"; \nimport {geolocated} from 'react-geolocated'; \nimport Geosuggest from 'react-geosuggest'; \nimport Home from \"./components/Home\"; \nimport FiveDay from \"./components/FiveDay\"; \nimport WeatherCard from \"./components/WeatherCard\"; \nimport \"./App.css\"; \nimport \"./geosuggest.css\"; \n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;  \n\nclass App extends Component {\n  state = {\n    location_description: \"\", \n    location: undefined, \n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  componentWillReceiveProps({coords}) {\n    if (coords) {\n      this.getWeatherFromCoords(coords.latitude, coords.longitude); \n      this.getFiveDayForecastFromCoords(coords.latitude, coords.longitude); \n    } \n  } \n\n  onSuggestSelect = (suggest) => {\n    if (suggest && suggest.location !== null) {\n      let location = suggest.location; \n      this.setState({ \n        location: location, \n        location_description: suggest.description\n      }); \n      this.getWeatherFromCoords(this.state.location.lat, this.state.location.lng); \n    } \n  }\n\n  setForecastFromAPIResponse = (response) => {\n    //store 5-day forecast data in state somehow\n    this.setState({\n    }); \n  } \n\n  getWeather = async () => {\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=london,uk&units=imperial&appid=${API_KEY}`); \n\n    const response = await api_call.json();\n    console.log(response);\n\n    this.setState({ location_description: null }); \n    this.setWeatherStateFromAPIResponse(response); \n  } \n\n  setWeatherStateFromAPIResponse = (response) => {\n    this.setState({\n      temperature: response.main.temp,\n      city: response.name,\n      country: response.sys.country,\n      humidity: response.main.humidity,\n      description: response.weather[0].description,\n      wind: response.wind.speed, \n      icon: response.weather[0].icon, \n      error: \"\", \n    });  \n  } \n\n  getWeatherFromCoords = async (lat, lon) => {\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&appid=${API_KEY}`); \n\n    const response = await api_call.json();\n    console.log(response);\n\n    this.setWeatherStateFromAPIResponse(response); \n  } \n\n  getFiveDayForecastFromCoords = async (lat, lon) => {\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=imperial&appid=${API_KEY}`); \n\n    const response = await api_call.json();\n    console.log(response);\n\n    this.setForecastFromAPIResponse(response);   \n  } \n\n\n  render() {\n    let state = this.state; \n    return (\n      <Router>\n        <div>\n          <header>\n            <div>\n              <button onClick={this.getWeather}>Get Weather In London</button>   \n              { this.props.coords? \n                <button onClick={() => this.getWeatherFromCoords(this.props.coords.latitude, this.props.coords.longitude)}>Use My Location</button> : null\n              } \n              <ul>\n                <li><Link to=\"/\">Home</Link></li>\n                <li><Link to=\"/five-day\">Five Day Forecast</Link></li>\n              </ul>\n              <div>\n                <h4>Enter your location</h4>\n                <Geosuggest \n                  onSuggestSelect={this.onSuggestSelect} \n                />\n              </div>\n            </div>\n          </header>\n\n        { (state && state.icon) ? \n          <WeatherCard \n            temp={state.temperature} \n            icon={state.icon} \n            location_description={state.location_description}\n            description={state.description} \n            city={state.city}\n            country={state.country}\n          />\n          : <p>No results found</p>\n        } \n        </div>\n\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/five-day\" component={FiveDay} />\n      </Router>\n    )\n  }\n} \n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false, \n  }, \n  userDecisionTimeout: 5000, \n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}